#!/bin/bash
# gh-upload: Upload files/folders to GitHub without local git clone
# Usage:
#   gh-upload <repo> <target-folder-in-repo> <local-path> [<local-path> ...]

USERNAME="$(gh api user --jq .login)"

if [ $# -lt 3 ]; then
    echo "Usage: $0 <repo> <target-folder-in-repo> <local-path>..."
    exit 1
fi

REPO="$1"
TARGET_FOLDER="$2"
shift 2

# Function to check if repo exists
repo_exists() {
    gh repo view "$USERNAME/$REPO" &>/dev/null
}

# Create repo if missing
if ! repo_exists; then
    echo "Repository '$REPO' does not exist."
    read -p "Make it private? (y/N): " priv
    if [[ "$priv" =~ ^[Yy]$ ]]; then
        gh repo create "$REPO" --private >/dev/null
        echo "✓ Created private repo $REPO"
    else
        gh repo create "$REPO" --public >/dev/null
        echo "✓ Created public repo $REPO"
    fi
fi

# Function to upload one file
upload_file() {
    local FILE="$1"
    local BASE="$2"
    local RELATIVE="${FILE#$BASE/}"          # remove base folder from path
    local REL_PATH="$TARGET_FOLDER/$RELATIVE"
    REL_PATH="${REL_PATH#/}"                 # strip leading slash

    b64=$(base64 -w 0 "$FILE")
    gh api \
      --method PUT \
      -H "Accept: application/vnd.github+json" \
      "/repos/$USERNAME/$REPO/contents/$REL_PATH" \
      -f message="Add $REL_PATH" \
      -f content="$b64" >/dev/null
    echo "✓ Uploaded $REL_PATH"
}

for ITEM in "$@"; do
    if [ -f "$ITEM" ]; then
        BASE=$(dirname "$ITEM")
        upload_file "$ITEM" "$BASE"
    elif [ -d "$ITEM" ]; then
        BASE=$(realpath "$ITEM")
        find "$BASE" -type f | while read -r FILE; do
            upload_file "$FILE" "$BASE"
        done
    else
        echo "⚠ Not found: $ITEM"
    fi
done
